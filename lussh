#!/bin/bash

# make sure to run this with /bin/bash, NOT /bin/sh

while getopts u:h:p:w: option
do
 case "${option}"
 in
 u) usr=${OPTARG};;
 h) host=${OPTARG};;
 p) port=${OPTARG};;
 w) pw=${OPTARG};;
 esac
done


echo -n "SSH server: "
echo -n host
if [ -n "$host" ]; then
    echo -n "user[$USER]: "
    echo -n usr

    #If user not provided use current user
    if [ -z "$usr" ]; then
      usr=$USER
    fi

    echo -n "port[$port] "
    echo -n port
    if [ -z "$port" ]; then
      port=22
    fi

    echo "Setting up RSA authentication for ${usr}@${host} (port $port)..."
    if [ -f ~/.ssh/id_rsa.pub ]; then
      echo "RSA public key OK."
    else
      ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
    fi

    echo "Appending your RSA public key to the server's authorized_keys"
    scp -P $port ~/.ssh/id_rsa.pub ${usr}@${host}:~/


    # Append public key to authorized keys and fix common
    # permission problems, eg. a group-writable .ssh dir,
    # or authorized_keys being readable by others.
    ssh ${usr}@${host} -p $port "if [ ! -d ~/.ssh ]; then
      $pw
      mkdir ~/.ssh
      fi
      chmod 700 ~/.ssh
      cat ~/id_rsa.pub >> ~/.ssh/authorized_keys
      chmod 0600 ~/.ssh/authorized_keys
      rm ~/id_rsa.pub"
    echo
    echo "You should see the following message without being prompted for anything now..."
    echo
    ssh ${usr}@${host} -p $port "echo !!! Congratulations, you are now logged in as ${usr}@${host} !!!"
    echo
    echo "If you were prompted, public key authentication could not be configured..."

    echo
    echo "Enter a blank servername when done."
    echo
fi

echo "End of configuration."